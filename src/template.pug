html
  head
    title= title
    meta(charset='utf-8')
    meta(name='viewport', content='width=device-width, initial-scale=1')
    script(src="https://cdnjs.cloudflare.com/ajax/libs/Chart.js/2.7.3/Chart.min.js")
    script(src="https://cdn.jsdelivr.net/npm/chartjs-plugin-datalabels")
    script(src="https://unpkg.com/cds-pretty-bytes@5.1.2/index.js")
    style(type="text/css").
      body{
        font-family: Helvetica, Arial, Sans-Serif;
        margin-left:50px;
      }
      h1 {
        font-size:1.2em;
        margin-left:0px;
        margin-bottom:20px;
      }
  body
    h1= reponame
    div(style="position: relative; max-height:50vh; max-width:100vh;")
     canvas(id="myChart" width="200" height="200")
    script.
      const ctx = document.getElementById("myChart");
      const reponame= "!{reponame}"
      const dataset = !{data}
      const options = {
              layout: {
                padding: {
                    left: 0,
                    right: 50,
                    top: 0,
                    bottom: 100
                }
              },
              legend: { position: "bottom" },
              tooltips: {
                callbacks: {
                  label: (tooltipItem, data)=> {
                    let index = tooltipItem.datasetIndex;
                    let size = prettyBytes(Math.round(tooltipItem.yLabel * 100) / 100);
                    return  `${data.datasets[index].label}: ${size}` || "";
                  }
                }
              },
              scales: {
                yAxes: [
                  {
                    display: true,
                    scaleLabel: {
                      display: true,
                      labelString: "File size"
                    },
                    ticks: {
                      callback: (value, index, values) => prettyBytes(value)
                    }
                  }
                ]
              },
              plugins: {
                datalabels: {
                  formatter: (value, context)=>{
                    return "";
                  },
                  listeners: {
                    click: (context) => {
                      const sha = dataset.labels[context.dataIndex]
                      if(!sha) return false
                      const uri = `https://github.com/${reponame}/commit/${sha}`
                      window.location = uri;
                    }
                  }
                }
              },
            };

            const obj = {
              type: "line",
              responsive: false,
              data: dataset,
              options
            };
            
            const myChart = new Chart(ctx, obj);
      